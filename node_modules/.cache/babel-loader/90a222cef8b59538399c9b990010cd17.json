{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Grid, Table, Button, Form, Image, Input, Header, Icon, Menu, Modal, Sidebar, Container, Card } from 'semantic-ui-react';\nimport Layout from '../../components/Layout';\nimport Cookies from 'js-cookie';\nimport { Router } from '../../routes';\nimport Election from '../../Ethereum/election';\nvar c = 0;\n\nvar VotingList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(VotingList, _Component);\n\n  function VotingList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, VotingList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VotingList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      election_address: Cookies.get('address'),\n      election_name: '',\n      election_description: '',\n      candidates: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTable\", function () {\n      return React.createElement(Card.Group, {\n        items: _this.state.item\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"GridExampleGrid\", function () {\n      return React.createElement(Grid, null, columns);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"SidebarExampleVisible\", function () {\n      return React.createElement(Sidebar.Pushable, null, React.createElement(Sidebar, {\n        as: Menu,\n        animation: \"overlay\",\n        icon: \"labeled\",\n        inverted: true,\n        vertical: true,\n        visible: true,\n        width: \"thin\",\n        style: {\n          backgroundColor: 'white',\n          borderWidth: \"10px\"\n        }\n      }, React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(\"h2\", null, \"MENU\"), React.createElement(\"hr\", null)), React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(Icon, {\n        name: \"dashboard\"\n      }), \"Dashboard\"), React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(Icon, {\n        name: \"user outline\"\n      }), \"Candidate List\"), React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(Icon, {\n        name: \"list\"\n      }), \"Voter List\"), React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(Icon, {\n        name: \"sign out\"\n      }), \"Sign Out\")));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"register\", function (event) {\n      var email = document.getElementById('register_voter_email').value;\n      var http = new XMLHttpRequest();\n      var url = \"/voter/register\";\n      var params = \"email=\" + email + \"&election_address=\" + _this.state.election_address + \"&election_name=\" + _this.state.election_name + \"&election_description=\" + _this.state.election_description;\n      http.open(\"POST\", url, true); //Send the proper header information along with the request\n\n      http.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\n      http.onreadystatechange = function () {\n        //Call a function when the state changes.\n        if (http.readyState == 4 && http.status == 200) {\n          var responseObj = JSON.parse(http.responseText);\n          if (responseObj.status == \"success\") alert(responseObj.message);else alert(responseObj.message);\n        }\n      };\n\n      http.send(params);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mail_to_all\", function (event) {\n      var http = new XMLHttpRequest();\n      var url = \"voter/sendMail\";\n      var params = \"election_address=\" + _this.state.election_address + \"&election_name=\" + _this.state.election_name + \"&election_description=\" + _this.state.election_description;\n      http.open(\"POST\", url, true); //Send the proper header information along with the request\n\n      http.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\n      http.onreadystatechange = function () {\n        //Call a function when the state changes.\n        if (http.readyState == 4 && http.status == 200) {\n          var responseObj = JSON.parse(http.responseText);\n\n          if (responseObj.status == \"success\") {\n            alert(responseObj.message);\n          } else {\n            alert(responseObj.message);\n          }\n        }\n      };\n\n      http.send(params);\n    });\n\n    return _this;\n  }\n\n  _createClass(VotingList, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var add, election, summary, _c, candidates, _i, i, items;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                add = Cookies.get('address');\n                election = Election(add);\n                _context.next = 5;\n                return election.methods.getElectionDetails().call();\n\n              case 5:\n                summary = _context.sent;\n                this.setState({\n                  election_name: summary[0],\n                  election_description: summary[1]\n                });\n                _context.next = 9;\n                return election.methods.getNumOfCandidates.call();\n\n              case 9:\n                _c = _context.sent;\n                candidates = [];\n                _i = 0;\n\n              case 12:\n                if (!(_i < _c)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.t0 = candidates;\n                _context.next = 16;\n                return election.methods.getCandidate(_i).call();\n\n              case 16:\n                _context.t1 = _context.sent;\n\n                _context.t0.push.call(_context.t0, _context.t1);\n\n              case 18:\n                _i++;\n                _context.next = 12;\n                break;\n\n              case 21:\n                console.log(candidates);\n                i = -1;\n                items = candidates.map(function (candidate) {\n                  i++;\n                  return {\n                    header: candidate[0],\n                    description: candidate[1],\n                    image: React.createElement(Image, {\n                      src: \"https://ipfs.io/ipfs/\".concat(candidate[2]),\n                      size: \"medium\"\n                    }),\n                    extra: React.createElement(\"div\", null, React.createElement(Icon, {\n                      iconPostion: \"left\",\n                      name: \"area graph\"\n                    }), React.createElement(Header, {\n                      as: \"h4\",\n                      description: ' votes received so far.'\n                    }))\n                  };\n                });\n                this.setState({\n                  item: items\n                });\n                _context.next = 32;\n                break;\n\n              case 27:\n                _context.prev = 27;\n                _context.t2 = _context[\"catch\"](0);\n                console.log(_context.t2.message);\n                alert(\"Redirecting you to login page...\");\n                Router.pushRoute('/company_login');\n\n              case 32:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 27]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderRows\",\n    value: function renderRows() {\n      return this.state;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Body = Table.Body,\n          Row = Table.Row,\n          HeaderCell = Table.HeaderCell,\n          Header = Table.Header;\n      return React.createElement(\"div\", null, React.createElement(Grid, null, React.createElement(Grid.Row, null, React.createElement(Grid.Column, {\n        width: 2\n      }, this.SidebarExampleVisible()), React.createElement(Layout, null, React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(Grid.Column, {\n        width: 14,\n        style: {\n          minHeight: '630px'\n        }\n      }, React.createElement(Grid.Column, {\n        style: {\n          float: 'left',\n          width: '60%'\n        }\n      }, React.createElement(Header, {\n        as: \"h2\",\n        color: \"black\"\n      }, \"Candidate List\"), React.createElement(Container, null, React.createElement(\"table\", null, this.renderTable()))), React.createElement(Grid.Column, {\n        style: {\n          float: 'right',\n          width: '30%'\n        }\n      }, React.createElement(Container, {\n        style: {}\n      }, React.createElement(Header, {\n        as: \"h2\",\n        color: \"black\"\n      }, \"Register Candidate\"), React.createElement(Card, {\n        style: {\n          width: '100%'\n        }\n      }, React.createElement(\"br\", null), React.createElement(Form.Group, {\n        size: \"large\",\n        style: {\n          marginLeft: '15%',\n          marginRight: '15%'\n        }\n      }, React.createElement(Form.Input, {\n        style: {\n          marginTop: '10px'\n        },\n        fluid: true,\n        id: \"register_voter_email\",\n        label: \"Email:\",\n        placeholder: \"Enter your email.\",\n        textAlign: \"center\"\n      }), React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(Button, {\n        primary: true,\n        style: {\n          Bottom: '10px',\n          marginBottom: '15px'\n        },\n        onClick: this.register\n      }, \"Register\"))))))))));\n    }\n  }]);\n\n  return VotingList;\n}(Component);\n\nexport default VotingList;","map":{"version":3,"sources":["D:\\Blockchain\\BlockChainVoting\\pages\\election\\candidate_list.js"],"names":["React","Component","Grid","Table","Button","Form","Image","Input","Header","Icon","Menu","Modal","Sidebar","Container","Card","Layout","Cookies","Router","Election","c","VotingList","election_address","get","election_name","election_description","candidates","state","item","columns","backgroundColor","borderWidth","color","event","email","document","getElementById","value","http","XMLHttpRequest","url","params","open","setRequestHeader","onreadystatechange","readyState","status","responseObj","JSON","parse","responseText","alert","message","send","add","election","methods","getElectionDetails","call","summary","setState","getNumOfCandidates","i","getCandidate","push","console","log","items","map","candidate","header","description","image","extra","pushRoute","Body","Row","HeaderCell","SidebarExampleVisible","minHeight","float","width","renderTable","marginLeft","marginRight","marginTop","Bottom","marginBottom","register"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Table, Button, Form, Image, Input,Header, Icon, Menu, Modal, Sidebar, Container, Card } from 'semantic-ui-react';\r\nimport Layout from '../../components/Layout';\r\nimport Cookies from 'js-cookie';\r\nimport {Router} from '../../routes';\r\nimport Election from '../../Ethereum/election';\r\nconst c = 0;\r\nclass VotingList extends Component { \r\n\r\n    state = {\r\n        election_address: Cookies.get('address'),\r\n        election_name: '',\r\n        election_description: '',\r\n        candidates: []\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const add = Cookies.get('address');\r\n            const election = Election(add);\r\n            const summary = await election.methods.getElectionDetails().call();\r\n            this.setState({\r\n                election_name: summary[0],\r\n                election_description: summary[1]\r\n            });            \r\n            const c = await election.methods.getNumOfCandidates.call();\r\n            let candidates = [];\r\n            for(let i=0 ; i<c; i++) {\r\n                candidates.push(await election.methods.getCandidate(i).call());\r\n            }\r\n            console.log(candidates);\r\n        let i=-1;\r\n        const items = candidates.map(candidate => {\r\n            i++;\r\n            return {\r\n              header: candidate[0],\r\n              description: candidate[1],\r\n              image: (\r\n                  <Image src={`https://ipfs.io/ipfs/${candidate[2]}`} size='medium'/>\r\n                ),\r\n              extra: (\r\n                <div>\r\n                    <Icon iconPostion='left' name='area graph'/>\r\n                    <Header as='h4' description={' votes received so far.'}/>\r\n                </div>\r\n              ),\r\n            };\r\n        });\r\n        this.setState({item: items}); \r\n        } catch(err) {\r\n            console.log(err.message);\r\n            alert(\"Redirecting you to login page...\");\r\n            Router.pushRoute('/company_login');\r\n        }\r\n    }\r\n\r\n    renderTable = () => {\r\n        return (<Card.Group items={this.state.item}/>)\r\n    } \r\n\r\n  GridExampleGrid = () => <Grid>{columns}</Grid>\r\n  SidebarExampleVisible = () => (\r\n\r\n    <Sidebar.Pushable>\r\n      <Sidebar as={Menu} animation='overlay' icon='labeled' inverted vertical visible width='thin' style={{ backgroundColor: 'white', borderWidth: \"10px\" }}>\r\n        <Menu.Item as='a' style={{ color: 'grey' }} >\r\n          <h2>MENU</h2><hr />\r\n        </Menu.Item>\r\n        <Menu.Item as='a' style={{ color: 'grey' }} >\r\n          <Icon name='dashboard' />\r\n          Dashboard\r\n          </Menu.Item>\r\n        <Menu.Item as='a' style={{ color: 'grey' }}>\r\n          <Icon name='user outline' />\r\n          Candidate List\r\n          </Menu.Item>\r\n        <Menu.Item as='a' style={{ color: 'grey' }}>\r\n          <Icon name='list' />\r\n          Voter List\r\n          </Menu.Item>\r\n        <Menu.Item as='a' style={{ color: 'grey' }}>\r\n          <Icon name='sign out' />\r\n          Sign Out\r\n          </Menu.Item>\r\n\r\n      </Sidebar>\r\n    </Sidebar.Pushable>\r\n  )\r\n\r\n    register = event => {\r\n\r\n\t\tconst email = document.getElementById('register_voter_email').value;        \r\n    \r\n\t\tvar http = new XMLHttpRequest();\r\n        var url = \"/voter/register\";\r\n        var params = \"email=\" + email+\"&election_address=\" + this.state.election_address+ \"&election_name=\" + this.state.election_name + \"&election_description=\" + this.state.election_description;\r\n        http.open(\"POST\", url, true);\r\n        //Send the proper header information along with the request\r\n        http.setRequestHeader(\r\n            \"Content-type\",\r\n            \"application/x-www-form-urlencoded\"\r\n        );\r\n        http.onreadystatechange = function() {\r\n            //Call a function when the state changes.\r\n            if (http.readyState == 4 && http.status == 200) {\r\n\r\n                var responseObj = JSON.parse(http.responseText);\r\n                if(responseObj.status==\"success\") \r\n                    alert(responseObj.message);                  \r\n                else \r\n                    alert(responseObj.message);                \r\n            }\r\n        };\r\n    \thttp.send(params);\r\n\t}\r\n\t\r\n\tmail_to_all = event => {\t\t\r\n\t\tvar http = new XMLHttpRequest();\r\n        var url = \"voter/sendMail\";\r\n        var params = \"election_address=\" + this.state.election_address + \"&election_name=\" + this.state.election_name + \"&election_description=\" + this.state.election_description;\r\n        http.open(\"POST\", url, true);\r\n        //Send the proper header information along with the request\r\n        http.setRequestHeader(\r\n            \"Content-type\",\r\n            \"application/x-www-form-urlencoded\"\r\n        );\r\n        http.onreadystatechange = function() {\r\n            //Call a function when the state changes.\r\n            if (http.readyState == 4 && http.status == 200) {\r\n                var responseObj = JSON.parse(http.responseText);\r\n                if(responseObj.status==\"success\") {\r\n                  alert(responseObj.message);                  \r\n                }\r\n                else {\r\n                  alert(responseObj.message);\r\n                }\r\n            }\r\n        };\r\n    \thttp.send(params);\r\n\t}\r\n\r\n  renderRows() {\r\n      return(\r\n          this.state\r\n      )\r\n  }\r\n\r\n  render() {\r\n      const {Body, Row, HeaderCell, Header} = Table;\r\n    return (\r\n      <div>\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column width={2}>\r\n              {this.SidebarExampleVisible()}\r\n            </Grid.Column>\r\n            <Layout>                      \r\n              <br />\r\n              <br />\r\n              <Grid.Column width={14} style={{ minHeight: '630px' }}>\r\n                <Grid.Column style={{ float: 'left', width: '60%' }}>\r\n                  <Header as='h2' color='black'>\r\n                    Candidate List\r\n              </Header>\r\n                  <Container>                      \r\n                      <table>\r\n                      {this.renderTable()}\r\n                      </table>                                        \r\n                  </Container>\r\n                </Grid.Column>\r\n                <Grid.Column style={{ float: 'right', width: '30%' }}>\r\n                  <Container style={{}}>\r\n                    <Header as='h2' color='black'>\r\n                      Register Candidate\r\n                       </Header>\r\n                    <Card style={{ width: '100%' }}>\r\n                      <br/>\r\n                      <Form.Group size='large' style={{ marginLeft: '15%', marginRight: '15%' }} >\r\n                        <Form.Input\r\n\t\t\t\t\t\tstyle={{marginTop: '10px'}}\r\n                          fluid\r\n                          id='register_voter_email'\r\n                          label='Email:'\r\n                          placeholder='Enter your email.'\r\n                          textAlign='center'\r\n                        />\r\n\r\n                        <br /><br />\r\n                        <Button primary style={{ Bottom: '10px', marginBottom: '15px' }} onClick={this.register}>Register</Button>\r\n                      </Form.Group>\r\n                    </Card>\r\n                  </Container>\r\n                </Grid.Column>                \r\n              </Grid.Column>\r\n            </Layout>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default VotingList"]},"metadata":{},"sourceType":"module"}