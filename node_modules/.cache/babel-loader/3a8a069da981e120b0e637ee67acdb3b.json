{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport web3 from '../Ethereum/web3';\nimport ipfs from '../ipfs';\nimport storeMyValue from '../Ethereum/factory';\n\nvar Test =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Test, _Component);\n\n  function Test() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Test);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Test)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      ipfsHash: null,\n      buffer: '',\n      transactionHash: '',\n      gasUsed: '',\n      txReceipt: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"captureFile\", function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convertToBuffer\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(reader) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer = _context.sent;\n\n                //set this buffer -using es6 syntax\n                _this.setState({\n                  buffer: buffer\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\",\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var accounts, ethAddress;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                event.preventDefault();\n                console.log(\"web3 value is \", web3.eth.getAccounts());\n                _context2.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context2.sent;\n                console.log('Sending from Metamask account: ', accounts[0]);\n                _context2.next = 8;\n                return storeMyValue.options.address;\n\n              case 8:\n                ethAddress = _context2.sent;\n\n                _this.setState({\n                  ethAddress: ethAddress\n                });\n\n                _context2.next = 12;\n                return ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                  console.log(err, ipfsHash);\n\n                  _this.setState({\n                    ipfsHash: ipfsHash[0].hash\n                  });\n\n                  storeMyValue.methods.set(_this.state.ipfsHash).send({\n                    from: accounts[0]\n                  }, function (error, transactionHash) {\n                    console.log(\"transaction hash is \", transactionHash);\n\n                    _this.setState({\n                      transactionHash: transactionHash\n                    });\n                  });\n                });\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(Test, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\"\n      }, React.createElement(\"header\", {\n        className: \"App-header\"\n      }, React.createElement(\"h1\", null, \" IPFS Dapp\")), React.createElement(\"hr\", null), React.createElement(\"h3\", null, \" Choose file to send to IPFS \"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile\n      }), React.createElement(\"button\", {\n        type: \"submit\"\n      }, \" Send it \")), React.createElement(\"hr\", null), React.createElement(\"table\", null, React.createElement(\"thead\", null, React.createElement(\"tr\", null, React.createElement(\"th\", null, \"Sl No\"), React.createElement(\"th\", null, \"Values\"))), React.createElement(\"tbody\", null, React.createElement(\"tr\", null, React.createElement(\"td\", null, \"IPFS Hash # stored on Eth Contract\"), React.createElement(\"td\", null, this.state.ipfsHash)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Ethereum Contract Address\"), React.createElement(\"td\", null, this.state.ethAddress)), React.createElement(\"tr\", null, React.createElement(\"td\", null, \"Tx Hash # \"), React.createElement(\"td\", null, this.state.transactionHash)))));\n    }\n  }]);\n\n  return Test;\n}(Component);\n\nexport default Test;","map":{"version":3,"sources":["D:\\Blockchain\\Campaign\\pages\\test.js"],"names":["React","Component","web3","ipfs","storeMyValue","Test","ipfsHash","buffer","transactionHash","gasUsed","txReceipt","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","console","log","eth","getAccounts","accounts","options","address","ethAddress","add","state","err","hash","methods","set","send","error","onSubmit","captureFile"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport web3 from '../Ethereum/web3';\r\nimport ipfs from '../ipfs';\r\nimport storeMyValue from '../Ethereum/factory';\r\nclass Test extends Component {\r\nstate = {\r\nipfsHash:null,\r\nbuffer:'',\r\ntransactionHash:'',\r\ngasUsed:'',\r\ntxReceipt: '' ,\r\n};\r\ncaptureFile =(event) => {\r\nevent.stopPropagation()\r\nevent.preventDefault()\r\nconst file = event.target.files[0]\r\nlet reader = new window.FileReader()\r\nreader.readAsArrayBuffer(file)\r\nreader.onloadend = () => this.convertToBuffer(reader)\r\n};\r\nconvertToBuffer = async(reader) => {\r\n//file is converted to a buffer for upload to IPFS\r\nconst buffer = await Buffer.from(reader.result);\r\n//set this buffer -using es6 syntax\r\nthis.setState({buffer});\r\n};\r\nonSubmit = async (event) => {\r\nevent.preventDefault();\r\nconsole.log(\"web3 value is \",web3.eth.getAccounts());\r\nconst accounts = await web3.eth.getAccounts();\r\nconsole.log('Sending from Metamask account: ' , accounts[0]);\r\nconst ethAddress= await storeMyValue.options.address;\r\nthis.setState({ethAddress});\r\nawait ipfs.add(this.state.buffer, (err, ipfsHash) => {\r\nconsole.log(err,ipfsHash);\r\nthis.setState({ ipfsHash:ipfsHash[0].hash });\r\nstoreMyValue.methods.set(this.state.ipfsHash).send({\r\nfrom: accounts[0]\r\n}, (error, transactionHash) => {\r\nconsole.log(\"transaction hash is \",transactionHash);\r\nthis.setState({transactionHash});\r\n});\r\n})\r\n};\r\nrender() {\r\nreturn (\r\n<div className=\"App\">\r\n<header className=\"App-header\">\r\n<h1> IPFS Dapp</h1>\r\n</header>\r\n<hr />\r\n<h3> Choose file to send to IPFS </h3>\r\n<form onSubmit={this.onSubmit}>\r\n<input type=\"file\" onChange={this.captureFile}/>\r\n<button type=\"submit\"> Send it </button>\r\n</form>\r\n<hr/>\r\n<table >\r\n<thead>\r\n<tr>\r\n<th>Sl No</th>\r\n<th>Values</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>IPFS Hash # stored on Eth Contract</td>\r\n<td>{this.state.ipfsHash}</td>\r\n</tr>\r\n<tr>\r\n<td>Ethereum Contract Address</td>\r\n<td>{this.state.ethAddress}</td>\r\n</tr>\r\n<tr>\r\n<td>Tx Hash # </td>\r\n<td>{this.state.transactionHash}</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>);\r\n}\r\n}\r\nexport default Test;"]},"metadata":{},"sourceType":"module"}