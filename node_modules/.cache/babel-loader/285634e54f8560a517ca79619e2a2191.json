{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Grid, Table, Button, Form, Header, Icon, Menu, Modal, Sidebar, Container, Card } from 'semantic-ui-react';\nimport Layout from '../../components/Layout';\n\nvar VotingList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(VotingList, _Component);\n\n  function VotingList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, VotingList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VotingList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      election_address: '0x48c098fe98F6aEa78e3f865Aad4991e976A14268',\n      election_name: 'abc',\n      election_description: 'abc',\n      emailArr: [],\n      idArr: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"GridExampleGrid\", function () {\n      return React.createElement(Grid, null, columns);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"SidebarExampleVisible\", function () {\n      return React.createElement(Sidebar.Pushable, null, React.createElement(Sidebar, {\n        as: Menu,\n        animation: \"overlay\",\n        icon: \"labeled\",\n        inverted: true,\n        vertical: true,\n        visible: true,\n        width: \"thin\",\n        style: {\n          backgroundColor: 'white',\n          borderWidth: \"10px\"\n        }\n      }, React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(\"h2\", null, \"MENU\"), React.createElement(\"hr\", null)), React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(Icon, {\n        name: \"dashboard\"\n      }), \"Dashboard\"), React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(Icon, {\n        name: \"user outline\"\n      }), \"Candidate List\"), React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(Icon, {\n        name: \"list\"\n      }), \"Voter List\"), React.createElement(Menu.Item, {\n        as: \"a\",\n        style: {\n          color: 'grey'\n        }\n      }, React.createElement(Icon, {\n        name: \"sign out\"\n      }), \"Sign Out\")));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"CardExampleGroupProps\", function () {\n      return React.createElement(Card.Group, null);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"register\", function (event) {\n      var email = document.getElementById('register_voter_email').value; //const election_address = 'abc'; //change to state variable\n\n      var http = new XMLHttpRequest();\n      var url = \"/voter/register\";\n      var params = \"email=\" + email + \"&election_address=\" + _this.state.election_address + \"&election_name=\" + _this.state.election_name + \"&election_description=\" + _this.state.election_description;\n      http.open(\"POST\", url, true); //Send the proper header information along with the request\n\n      http.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\n      http.onreadystatechange = function () {\n        //Call a function when the state changes.\n        if (http.readyState == 4 && http.status == 200) {\n          var responseObj = JSON.parse(http.responseText);\n\n          if (responseObj.status == \"success\") {\n            alert(responseObj.message); //window.location(\"localhost:3000\");\n          } else {\n            alert(responseObj.message);\n          }\n        }\n      };\n\n      http.send(params);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mail_to_all\", function (event) {\n      //const election_address = 'abc'; //change to state variable\n      //const election_name = 'e_name';\n      //const election_description = 'e_desc';\n      var http = new XMLHttpRequest();\n      var url = \"voter/sendMail\";\n      var params = \"election_address=\" + _this.state.election_address + \"&election_name=\" + _this.state.election_name + \"&election_description=\" + _this.state.election_description;\n      http.open(\"POST\", url, true); //Send the proper header information along with the request\n\n      http.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\n      http.onreadystatechange = function () {\n        //Call a function when the state changes.\n        if (http.readyState == 4 && http.status == 200) {\n          var responseObj = JSON.parse(http.responseText);\n\n          if (responseObj.status == \"success\") {\n            alert(responseObj.message);\n          } else {\n            alert(responseObj.message);\n          }\n        }\n      };\n\n      http.send(params);\n    });\n\n    return _this;\n  }\n\n  _createClass(VotingList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var http = new XMLHttpRequest();\n      var url = '/voter/';\n      http.open(\"GET\", url, true);\n      var email = [];\n      var id = []; //Send the proper header information along with the request\n\n      http.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\n      http.onreadystatechange = function () {\n        //Call a function when the state changes.\n        if (http.readyState == 4 && http.status == 200) {\n          var responseObj = JSON.parse(http.responseText);\n\n          if (responseObj.status == \"success\") {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = _getIterator(responseObj.data.voters), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var voter = _step.value;\n                email = voter.email;\n                id = voter.id;\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          }\n        }\n      };\n\n      http.send();\n      this.state.emailArr.push(email);\n      console.log(this.state.emailArr);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, React.createElement(Grid, null, React.createElement(Grid.Row, null, React.createElement(Grid.Column, {\n        width: 2\n      }, this.SidebarExampleVisible()), React.createElement(Layout, null, React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(Grid.Column, {\n        width: 14,\n        style: {\n          minHeight: '630px'\n        }\n      }, React.createElement(Grid.Column, {\n        style: {\n          float: 'left',\n          width: '60%'\n        }\n      }, React.createElement(Header, {\n        as: \"h2\",\n        color: \"black\"\n      }, \"Voter List\"), React.createElement(Container, null, React.createElement(Table, {\n        celled: true,\n        compact: true\n      }, React.createElement(Table.Header, null, React.createElement(Table.Row, null, React.createElement(Table.HeaderCell, {\n        collapsing: true\n      }, \"Sr. No.\"), React.createElement(Table.HeaderCell, null, \"E-mail address\"), React.createElement(Table.HeaderCell, null))), React.createElement(Table.Body, null, React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        collapsing: true\n      }, \"1\"), React.createElement(Table.Cell, null, \"abc@abc.co\"), \" \", React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        style: {\n          width: '50%'\n        }\n      }, React.createElement(Modal, {\n        size: 'tiny',\n        trigger: React.createElement(Button, {\n          positive: true\n        }, \"Edit\"),\n        closeIcon: true\n      }, \" \", React.createElement(Modal.Header, null, \"Edit Email ID\"), React.createElement(\"center\", null, React.createElement(Modal.Content, null, React.createElement(Form.Input, {\n        icon: \"user\",\n        iconPosition: \"left\",\n        placeholder: \"Username\",\n        style: {\n          padding: 5,\n          textAlign: 'center'\n        }\n      }), React.createElement(\"br\", null), React.createElement(Button, {\n        icon: \"mail\",\n        color: \"black\",\n        padding: \"10\",\n        style: {\n          marginBottom: '30px'\n        }\n      }, \"Update\")))), React.createElement(Button, {\n        negative: true\n      }, \"Delete\"))), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        collapsing: true\n      }, \"2\"), React.createElement(Table.Cell, null, \"abc@abc.co\"), React.createElement(Table.Cell, {\n        textAlign: \"center\"\n      }, React.createElement(Modal, {\n        size: 'tiny',\n        trigger: React.createElement(Button, {\n          positive: true\n        }, \"Edit\"),\n        closeIcon: true\n      }, React.createElement(Modal.Header, null, \"Edit Email ID\"), React.createElement(\"center\", null, React.createElement(Modal.Content, null, React.createElement(Form.Input, {\n        icon: \"user\",\n        iconPosition: \"left\",\n        placeholder: \"Username\",\n        style: {\n          padding: 5,\n          textAlign: 'center'\n        }\n      }), React.createElement(\"br\", null), React.createElement(Button, {\n        icon: \"mail\",\n        color: \"black\",\n        padding: \"10\",\n        style: {\n          marginBottom: '30px'\n        }\n      }, \"Send Mail\")))), React.createElement(Button, {\n        negative: true\n      }, \"Delete\"))), React.createElement(Table.Row, null, React.createElement(Table.Cell, {\n        collapsing: true\n      }, \"3\"), React.createElement(Table.Cell, null, \"abc@abc.co\"), React.createElement(Table.Cell, {\n        textAlign: \"center\"\n      }, React.createElement(Modal, {\n        size: 'tiny',\n        trigger: React.createElement(Button, {\n          positive: true\n        }, \"Edit\"),\n        closeIcon: true\n      }, React.createElement(Modal.Header, null, \"Edit Email ID\"), React.createElement(\"center\", null, React.createElement(Modal.Content, null, React.createElement(Form.Input, {\n        icon: \"user\",\n        iconPosition: \"left\",\n        placeholder: \"Username\",\n        style: {\n          padding: 5,\n          textAlign: 'center'\n        }\n      }), React.createElement(\"br\", null), React.createElement(Button, {\n        icon: \"mail\",\n        color: \"black\",\n        padding: \"10\",\n        style: {\n          marginBottom: '30px'\n        }\n      }, \"Send Mail\")))), React.createElement(Button, {\n        negative: true\n      }, \"Delete\"))))))), React.createElement(Grid.Column, {\n        style: {\n          float: 'right',\n          width: '30%'\n        }\n      }, React.createElement(Container, {\n        style: {}\n      }, React.createElement(Header, {\n        as: \"h2\",\n        color: \"black\"\n      }, \"Register Voter\"), React.createElement(Card, {\n        style: {\n          width: '100%'\n        }\n      }, React.createElement(\"br\", null), React.createElement(Form.Group, {\n        size: \"large\",\n        style: {\n          marginLeft: '15%',\n          marginRight: '15%'\n        }\n      }, React.createElement(Form.Input, {\n        style: {\n          marginTop: '10px'\n        },\n        fluid: true,\n        id: \"register_voter_email\",\n        label: \"Email:\",\n        placeholder: \"Enter your email.\",\n        textAlign: \"center\"\n      }), React.createElement(\"br\", null), React.createElement(\"br\", null), React.createElement(Button, {\n        primary: true,\n        style: {\n          Bottom: '10px',\n          marginBottom: '15px'\n        },\n        onClick: this.register\n      }, \"Register\"))))))))));\n    }\n  }]);\n\n  return VotingList;\n}(Component);\n\nexport default VotingList;","map":{"version":3,"sources":["D:\\Blockchain\\BlockChainVoting\\pages\\election\\voting_list.js"],"names":["React","Component","Grid","Table","Button","Form","Header","Icon","Menu","Modal","Sidebar","Container","Card","Layout","VotingList","election_address","election_name","election_description","emailArr","idArr","columns","backgroundColor","borderWidth","color","event","email","document","getElementById","value","http","XMLHttpRequest","url","params","state","open","setRequestHeader","onreadystatechange","readyState","status","responseObj","JSON","parse","responseText","alert","message","send","id","data","voters","voter","push","console","log","SidebarExampleVisible","minHeight","float","width","padding","textAlign","marginBottom","marginLeft","marginRight","marginTop","Bottom","register"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Table, Button, Form, Header, Icon, Menu, Modal, Sidebar, Container, Card } from 'semantic-ui-react';\r\nimport Layout from '../../components/Layout';\r\nclass VotingList extends Component { \r\n\r\n    state = {\r\n        election_address: '0x48c098fe98F6aEa78e3f865Aad4991e976A14268',\r\n        election_name: 'abc',\r\n        election_description: 'abc',\r\n        emailArr: [],\r\n        idArr: [] \r\n    }\r\n\r\n    componentDidMount() {\r\n        var http = new XMLHttpRequest();\r\n        var url = '/voter/';        \r\n        http.open(\"GET\", url, true);\r\n        let email = [];\r\n        let id=[];\r\n        //Send the proper header information along with the request\r\n        http.setRequestHeader(\r\n            \"Content-type\",\r\n            \"application/x-www-form-urlencoded\"\r\n        );\r\n        http.onreadystatechange = function() {\r\n            //Call a function when the state changes.\r\n            if (http.readyState == 4 && http.status == 200) {\r\n                var responseObj = JSON.parse(http.responseText);\r\n                if(responseObj.status==\"success\") {\r\n                  for (let voter of responseObj.data.voters) {\r\n                         email = voter.email;\r\n                         id = voter.id;                         \r\n                  } \r\n                }\r\n                \r\n            }\r\n        };\r\n        http.send();\r\n        this.state.emailArr.push(email);\r\n        console.log(this.state.emailArr);\r\n    }\r\n\r\n  GridExampleGrid = () => <Grid>{columns}</Grid>\r\n  SidebarExampleVisible = () => (\r\n\r\n    <Sidebar.Pushable>\r\n      <Sidebar as={Menu} animation='overlay' icon='labeled' inverted vertical visible width='thin' style={{ backgroundColor: 'white', borderWidth: \"10px\" }}>\r\n        <Menu.Item as='a' style={{ color: 'grey' }} >\r\n          <h2>MENU</h2><hr />\r\n        </Menu.Item>\r\n        <Menu.Item as='a' style={{ color: 'grey' }} >\r\n          <Icon name='dashboard' />\r\n          Dashboard\r\n          </Menu.Item>\r\n        <Menu.Item as='a' style={{ color: 'grey' }}>\r\n          <Icon name='user outline' />\r\n          Candidate List\r\n          </Menu.Item>\r\n        <Menu.Item as='a' style={{ color: 'grey' }}>\r\n          <Icon name='list' />\r\n          Voter List\r\n          </Menu.Item>\r\n        <Menu.Item as='a' style={{ color: 'grey' }}>\r\n          <Icon name='sign out' />\r\n          Sign Out\r\n          </Menu.Item>\r\n\r\n      </Sidebar>\r\n    </Sidebar.Pushable>\r\n  )\r\n  CardExampleGroupProps = () => (<Card.Group >\r\n\r\n  </Card.Group>)\r\n\r\n    register = event => {\r\n\r\n\t\tconst email = document.getElementById('register_voter_email').value;\r\n    //const election_address = 'abc'; //change to state variable\r\n    \r\n\t\tvar http = new XMLHttpRequest();\r\n        var url = \"/voter/register\";\r\n        var params = \"email=\" + email+\"&election_address=\" + this.state.election_address+ \"&election_name=\" + this.state.election_name + \"&election_description=\" + this.state.election_description;\r\n        http.open(\"POST\", url, true);\r\n        //Send the proper header information along with the request\r\n        http.setRequestHeader(\r\n            \"Content-type\",\r\n            \"application/x-www-form-urlencoded\"\r\n        );\r\n        http.onreadystatechange = function() {\r\n            //Call a function when the state changes.\r\n            if (http.readyState == 4 && http.status == 200) {\r\n                var responseObj = JSON.parse(http.responseText);\r\n                if(responseObj.status==\"success\") {\r\n                  alert(responseObj.message);\r\n                  //window.location(\"localhost:3000\");\r\n                }\r\n                else {\r\n                  alert(responseObj.message);\r\n                }\r\n            }\r\n        };\r\n    \thttp.send(params);\r\n\t}\r\n\t\r\n\tmail_to_all = event => {\r\n\t\t//const election_address = 'abc'; //change to state variable\r\n\t\t//const election_name = 'e_name';\r\n\t\t//const election_description = 'e_desc';\r\n\t\tvar http = new XMLHttpRequest();\r\n        var url = \"voter/sendMail\";\r\n        var params = \"election_address=\" + this.state.election_address + \"&election_name=\" + this.state.election_name + \"&election_description=\" + this.state.election_description;\r\n        http.open(\"POST\", url, true);\r\n        //Send the proper header information along with the request\r\n        http.setRequestHeader(\r\n            \"Content-type\",\r\n            \"application/x-www-form-urlencoded\"\r\n        );\r\n        http.onreadystatechange = function() {\r\n            //Call a function when the state changes.\r\n            if (http.readyState == 4 && http.status == 200) {\r\n                var responseObj = JSON.parse(http.responseText);\r\n                if(responseObj.status==\"success\") {\r\n                  alert(responseObj.message);                  \r\n                }\r\n                else {\r\n                  alert(responseObj.message);\r\n                }\r\n            }\r\n        };\r\n    \thttp.send(params);\r\n\t}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column width={2}>\r\n              {this.SidebarExampleVisible()}\r\n            </Grid.Column>\r\n            <Layout>                      \r\n              <br />\r\n              <br />\r\n              <Grid.Column width={14} style={{ minHeight: '630px' }}>\r\n                <Grid.Column style={{ float: 'left', width: '60%' }}>\r\n                  <Header as='h2' color='black'>\r\n                    Voter List\r\n              </Header>\r\n                  <Container >\r\n                    <Table celled compact>\r\n                      <Table.Header>\r\n                        <Table.Row>\r\n                          <Table.HeaderCell collapsing>Sr. No.</Table.HeaderCell>\r\n                          <Table.HeaderCell>E-mail address</Table.HeaderCell>\r\n                          <Table.HeaderCell />\r\n                        </Table.Row>\r\n                      </Table.Header>\r\n\r\n                      <Table.Body>\r\n                        <Table.Row>\r\n                          <Table.Cell collapsing>1</Table.Cell>\r\n                          <Table.Cell>abc@abc.co</Table.Cell> {/* voter.email */}\r\n                          <Table.Cell textAlign='center' style={{ width: '50%' }}>                            \r\n                            <Modal size={'tiny'} trigger={<Button positive>Edit</Button>} closeIcon> {/* voter.id */}\r\n                              <Modal.Header>Edit Email ID</Modal.Header> \r\n                              <center>\r\n                                <Modal.Content>\r\n                                  <Form.Input icon='user' iconPosition='left' placeholder='Username' style={{ padding: 5, textAlign: 'center' }} />\r\n                                  <br />\r\n                                  <Button icon='mail' color=\"black\" padding=\"10\" style={{ marginBottom: '30px' }}>Update</Button>\r\n                                </Modal.Content>\r\n                              </center>\r\n                            </Modal>\r\n                            <Button negative>Delete</Button>\r\n                          </Table.Cell>\r\n                        </Table.Row>\r\n                        <Table.Row>\r\n                          <Table.Cell collapsing>2</Table.Cell>\r\n                          <Table.Cell>abc@abc.co</Table.Cell>\r\n                          <Table.Cell textAlign='center'>                            \r\n                            <Modal size={'tiny'} trigger={<Button positive>Edit</Button>} closeIcon>\r\n                              <Modal.Header>Edit Email ID</Modal.Header>\r\n                              <center>\r\n                                <Modal.Content>\r\n                                  <Form.Input icon='user' iconPosition='left' placeholder='Username' style={{ padding: 5, textAlign: 'center' }} />\r\n                                  <br />\r\n                                  <Button icon='mail' color=\"black\" padding=\"10\" style={{ marginBottom: '30px' }}>Send Mail</Button>\r\n                                </Modal.Content>\r\n                              </center>\r\n                            </Modal>\r\n                            <Button negative>Delete</Button>\r\n                          </Table.Cell>\r\n                        </Table.Row>\r\n                        <Table.Row>\r\n                          <Table.Cell collapsing>3</Table.Cell>\r\n                          <Table.Cell>abc@abc.co</Table.Cell>\r\n                          <Table.Cell textAlign='center'>\r\n                            <Modal size={'tiny'} trigger={<Button positive>Edit</Button>} closeIcon>\r\n                              <Modal.Header>Edit Email ID</Modal.Header>\r\n                              <center>\r\n                                <Modal.Content>\r\n                                  <Form.Input icon='user' iconPosition='left' placeholder='Username' style={{ padding: 5, textAlign: 'center' }} />\r\n                                  <br />\r\n                                  <Button icon='mail' color=\"black\" padding=\"10\" style={{ marginBottom: '30px' }}>Send Mail</Button>\r\n                                </Modal.Content>\r\n                              </center>\r\n                            </Modal>\r\n                            <Button negative>Delete</Button>\r\n                          </Table.Cell>\r\n                        </Table.Row>\r\n\r\n                      </Table.Body>\r\n\r\n                      \r\n                    </Table>\r\n                  </Container>\r\n                </Grid.Column>\r\n                <Grid.Column style={{ float: 'right', width: '30%' }}>\r\n                  <Container style={{}}>\r\n                    <Header as='h2' color='black'>\r\n                      Register Voter\r\n                       </Header>\r\n                    <Card style={{ width: '100%' }}>\r\n                      <br/>\r\n                      <Form.Group size='large' style={{ marginLeft: '15%', marginRight: '15%' }} >\r\n                        <Form.Input\r\n\t\t\t\t\t\tstyle={{marginTop: '10px'}}\r\n                          fluid\r\n                          id='register_voter_email'\r\n                          label='Email:'\r\n                          placeholder='Enter your email.'\r\n                          textAlign='center'\r\n                        />\r\n\r\n                        <br /><br />\r\n                        <Button primary style={{ Bottom: '10px', marginBottom: '15px' }} onClick={this.register}>Register</Button>\r\n                      </Form.Group>\r\n                    </Card>\r\n                  </Container>\r\n                </Grid.Column>                \r\n              </Grid.Column>\r\n            </Layout>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default VotingList"]},"metadata":{},"sourceType":"module"}