{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from \"react\";\nimport { Button, Form, Grid, Header, Segment, Icon, Message } from \"semantic-ui-react\";\nimport web3 from \"../../Ethereum/web3\";\nimport Election_Factory from \"../../Ethereum/election_factory\";\nimport { Router } from \"../../routes\";\nimport Cookies from 'js-cookie';\n\nvar LoginForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoginForm, _Component);\n\n  function LoginForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoginForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      //retrieve the company's email via cookie\n      election_name: \"\",\n      election_description: \"\",\n      loading: false,\n      errorMess: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"signin\",\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var email, accounts, bool, summary;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  loading: true,\n                  errorMess: ''\n                });\n\n                _context.prev = 2;\n                email = Cookies.get('company_email');\n                console.log(_this.state.election_name);\n                console.log(_this.state.election_description);\n                _context.next = 8;\n                return web3.eth.getAccounts();\n\n              case 8:\n                accounts = _context.sent;\n                console.log(accounts[0]);\n                _context.next = 12;\n                return Election_Factory.methods.createElection(email, _this.state.election_name, _this.state.election_description).send({\n                  from: accounts[0]\n                });\n\n              case 12:\n                bool = _context.sent;\n\n                if (!bool) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.next = 16;\n                return Election_Factory.methods.getDeployedElection(\"xyz\").call();\n\n              case 16:\n                summary = _context.sent;\n                console.log(summary[0]);\n\n                _this.setState({\n                  loading: false\n                });\n\n                Router.pushRoute(\"/election/\".concat(summary[0], \"/company_dashboard\"));\n\n              case 20:\n                _context.next = 25;\n                break;\n\n              case 22:\n                _context.prev = 22;\n                _context.t0 = _context[\"catch\"](2);\n\n                _this.setState({\n                  errorMess: _context.t0.message\n                });\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 22]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"LoginForm\", function () {\n      return React.createElement(\"div\", {\n        className: \"login-form\"\n      }, React.createElement(\"style\", {\n        JSX: true\n      }, \"\\n                .login-form {\\n                    width:100%;\\n                    height:100%;\\n                    position:absolute;\\n                    background: url('../../static/blockchain.jpg') no-repeat;\\n                } \\n              \"), React.createElement(Grid, {\n        textAlign: \"center\",\n        style: {\n          height: \"100%\"\n        },\n        verticalAlign: \"middle\"\n      }, React.createElement(Grid.Column, {\n        style: {\n          maxWidth: 380\n        }\n      }, React.createElement(Form, {\n        size: \"large\"\n      }, React.createElement(Segment, null, React.createElement(Header, {\n        as: \"h2\",\n        color: \"black\",\n        textAlign: \"center\",\n        style: {\n          marginTop: 10\n        }\n      }, \"Create an election!\"), React.createElement(Form.Input, {\n        fluid: true,\n        iconPosition: \"left\",\n        icon: \"address card outline\",\n        placeholder: \"Election Name\",\n        style: {\n          padding: 5\n        },\n        value: _this.state.election_name,\n        onChange: function onChange(event) {\n          return _this.setState({\n            election_name: event.target.value\n          });\n        },\n        required: true\n      }), React.createElement(Form.Input, {\n        as: \"TextArea\",\n        required: true,\n        style: {\n          maxHeight: \"30px\",\n          maxWidth: \"96%\",\n          marginBottom: \"10px\"\n        },\n        fluid: true,\n        placeholder: \"Election Description\",\n        value: _this.state.election_description,\n        onChange: function onChange(event) {\n          return _this.setState({\n            election_description: event.target.value\n          });\n        }\n      }), React.createElement(Button, {\n        color: \"blue\",\n        fluid: true,\n        size: \"large\",\n        style: {\n          marginBottom: 15\n        },\n        onClick: _this.signin,\n        loading: _this.state.loading\n      }, \"Submit\"), React.createElement(Message, {\n        icon: true,\n        info: true\n      }, React.createElement(Icon, {\n        name: \"exclamation circle\"\n      }), React.createElement(Message.Header, null, \"Note: \"), React.createElement(Message.Content, null, \"Election creation will take several minutes.\")))))));\n    });\n\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", null, React.createElement(\"link\", {\n        rel: \"stylesheet\",\n        href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"\n      }), this.LoginForm());\n    }\n  }]);\n\n  return LoginForm;\n}(Component);\n\nexport default LoginForm;","map":{"version":3,"sources":["D:\\Blockchain\\BlockChainVoting\\pages\\election\\create_election.js"],"names":["React","Component","Button","Form","Grid","Header","Segment","Icon","Message","web3","Election_Factory","Router","Cookies","LoginForm","election_name","election_description","loading","errorMess","event","preventDefault","setState","email","get","console","log","state","eth","getAccounts","accounts","methods","createElection","send","from","bool","getDeployedElection","call","summary","pushRoute","message","height","maxWidth","marginTop","padding","target","value","maxHeight","marginBottom","signin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Form, Grid, Header, Segment, Icon, Message } from \"semantic-ui-react\";\r\nimport web3 from \"../../Ethereum/web3\";\r\nimport Election_Factory from \"../../Ethereum/election_factory\";\r\nimport { Router } from \"../../routes\";\r\nimport Cookies from 'js-cookie';\r\nclass LoginForm extends Component {\r\n  state = {\r\n    //retrieve the company's email via cookie\r\n    election_name: \"\",\r\n    election_description: \"\",\r\n    loading: false,\r\n    errorMess: \"\"\r\n  };\r\n\r\n  signin = async event => {\r\n      event.preventDefault(); \r\n      this.setState({loading: true, errorMess: ''});\r\n    try {    \r\n      const email = Cookies.get('company_email');  \r\n      console.log(this.state.election_name);\r\n      console.log(this.state.election_description);\r\n      const accounts = await web3.eth.getAccounts();\r\n      console.log(accounts[0]);\r\n      const bool = await Election_Factory.methods\r\n        .createElection(\r\n          email,\r\n          this.state.election_name,\r\n          this.state.election_description\r\n        )\r\n        .send({ from: accounts[0] });\r\n\r\n    if(bool) {\r\n        const summary = await Election_Factory.methods\r\n          .getDeployedElection(\"xyz\")\r\n          .call();\r\n        console.log(summary[0]);\r\n        this.setState({loading: false});\r\n        Router.pushRoute(`/election/${summary[0]}/company_dashboard`);\r\n    }\r\n    } catch(err) {\r\n      this.setState({errorMess: err.message});\r\n    }\r\n  };\r\n\r\n  LoginForm = () => (\r\n    <div className=\"login-form\">\r\n      <style JSX>{`\r\n                .login-form {\r\n                    width:100%;\r\n                    height:100%;\r\n                    position:absolute;\r\n                    background: url('../../static/blockchain.jpg') no-repeat;\r\n                } \r\n              `}</style>\r\n\r\n      <Grid\r\n        textAlign=\"center\"\r\n        style={{ height: \"100%\" }}\r\n        verticalAlign=\"middle\"\r\n      >\r\n        <Grid.Column style={{ maxWidth: 380 }}>\r\n          <Form size=\"large\">\r\n            <Segment>\r\n              <Header\r\n                as=\"h2\"\r\n                color=\"black\"\r\n                textAlign=\"center\"\r\n                style={{ marginTop: 10 }}\r\n              >\r\n                Create an election!\r\n              </Header>\r\n              <Form.Input\r\n                fluid\r\n                iconPosition=\"left\"\r\n                icon=\"address card outline\"\r\n                placeholder=\"Election Name\"\r\n                style={{ padding: 5 }}\r\n                value={this.state.election_name}\r\n                onChange={event =>\r\n                  this.setState({ election_name: event.target.value })\r\n                }\r\n                required={true}\r\n              />\r\n              <Form.Input\r\n                as=\"TextArea\"\r\n                required={true}\r\n                style={{\r\n                  maxHeight: \"30px\",\r\n                  maxWidth: \"96%\",\r\n                  marginBottom: \"10px\"\r\n                }}\r\n                fluid\r\n                placeholder=\"Election Description\"\r\n                value={this.state.election_description}\r\n                onChange={event =>\r\n                  this.setState({ election_description: event.target.value })\r\n                }\r\n              />\r\n\r\n              <Button\r\n                color=\"blue\"\r\n                fluid\r\n                size=\"large\"\r\n                style={{ marginBottom: 15 }}\r\n                onClick={this.signin}\r\n                loading={this.state.loading}\r\n              >\r\n                Submit\r\n              </Button>\r\n              <Message icon info>\r\n                    <Icon name=\"exclamation circle\" /> \r\n                    <Message.Header>Note: </Message.Header>\r\n                    <Message.Content>                          \r\n                      Election creation will take several minutes.\r\n                    </Message.Content>\r\n              </Message>\r\n            </Segment>\r\n          </Form>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </div>\r\n  );\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"\r\n        />\r\n        {/* <link href=\"../css/paper-dashboard.css?v=2.0.0\" rel=\"stylesheet\" /> */}\r\n        {this.LoginForm()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}